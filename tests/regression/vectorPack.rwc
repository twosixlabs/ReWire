device top_level:

inputs [("__in0",64),("__in1",64)]
outputs [("__out0",64),("__out1",64)]
states []

$Pure.dispatch :: W128 -> W129
$Pure.dispatch $0 = 129'case 128'$0 of
    {128'@} -> Main.loop

$Pure.start :: W129
$Pure.start  = 129'h100000000000000000000000000000000

$LL.Main.compute :: W64 -> W3 -> W8
$LL.Main.compute $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$1 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000002} of
                            {128'@, 128'@} -> Mul
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000001} of
                    {128'@, 128'@} -> Add
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute1 :: W64 -> W3 -> W8
$LL.Main.compute1 $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$1 of
                                      {3'@} -> Resize
                                    , 128'h00000000000000000000000000000003} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h00000000000000000000000000000008} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000002} of
                            {128'@, 128'@} -> Mul
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000001} of
                    {128'@, 128'@} -> Add
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute2 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute2 $0 $1 $2 = 8'case {64'$0
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
      {128'@, 128'@} -> Lt} of
    {64'@, 3'@, 1'h1} -> $LL.Main.compute
    _ -> 8'case {64'$1
      , 3'$2
      , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
        {128'@, 128'@} -> Lt} of
      {64'@, 3'@, 1'h0} -> $LL.Main.compute1

$LL.Main.compute3 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute3 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'$2 of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute4 :: W3 -> W64 -> W8
$LL.Main.compute4 $0 $1 = 8'case 128'case {128'case 64'$1 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'$0 of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute5 :: W3 -> W64 -> W8
$LL.Main.compute5 $0 $1 = 8'case 128'case {128'case 64'$1 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000003} of
                            {128'@, 128'@} -> Sub
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute6 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute6 $0 $1 $2 = 8'case {3'$2
    , 64'$0
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
      {128'@, 128'@} -> Lt} of
    {3'@, 64'@, 1'h1} -> $LL.Main.compute4
    _ -> 8'case {3'$2
      , 64'$1
      , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
        {128'@, 128'@} -> Lt} of
      {3'@, 64'@, 1'h0} -> $LL.Main.compute5

$LL.Main.compute7 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute7 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute6} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000003} of
                            {128'@, 128'@} -> Sub
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute8 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute8 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
      {128'@, 128'@} -> Lt} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute3
    _ -> 8'case {64'$0
      , 64'$1
      , 3'$2
      , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
        {128'@, 128'@} -> Lt} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute7

$LL.Main.compute9 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute9 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute8} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'$2 of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Div
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute13 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute13 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000002} of
                            {128'@, 128'@} -> Mul
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000001} of
                    {128'@, 128'@} -> Add
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute14 :: W64 -> W3 -> W8
$LL.Main.compute14 $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'$1 of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute15 :: W64 -> W3 -> W8
$LL.Main.compute15 $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$1 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000003} of
                            {128'@, 128'@} -> Sub
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute16 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute16 $0 $1 $2 = 8'case {64'$0
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
      {128'@, 128'@} -> Lt} of
    {64'@, 3'@, 1'h1} -> $LL.Main.compute14
    _ -> 8'case {64'$1
      , 3'$2
      , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
        {128'@, 128'@} -> Lt} of
      {64'@, 3'@, 1'h0} -> $LL.Main.compute15

$LL.Main.compute17 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute17 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                                      {3'@} -> Resize
                                    , 128'h00000000000000000000000000000003} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h00000000000000000000000000000008} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000002} of
                            {128'@, 128'@} -> Mul
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000001} of
                    {128'@, 128'@} -> Add
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute18 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute18 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
      {128'@, 128'@} -> Lt} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute13
    _ -> 8'case {64'$0
      , 64'$1
      , 3'$2
      , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
        {128'@, 128'@} -> Lt} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute17

$LL.Main.compute19 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute19 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute18} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000001} of
                            {128'@, 128'@} -> Sub
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Div
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute20 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute20 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case 1'case 1'case 128'case 3'$2 of
            {3'@} -> Resize of
          {128'@} -> Resize of
        {1'@} -> MSBit of
      {1'@} -> ReWire.Prelude.not} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute9
    _ -> 8'case {64'$0
      , 64'$1
      , 3'$2
      , 1'case 1'case 1'case 128'case 3'$2 of
              {3'@} -> Resize of
            {128'@} -> Resize of
          {1'@} -> MSBit of
        {1'@} -> ReWire.Prelude.not} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute19

$LL.Main.compute24 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute24 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'$0 of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute28 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute28 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000003} of
                            {128'@, 128'@} -> Sub
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Mul
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute29 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute29 $0 $1 $2 = 8'case {3'$2
    , 64'$0
    , 64'$1
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
      {128'@, 128'@} -> Lt} of
    {3'@, 64'@, 64'@, 1'h1} -> $LL.Main.compute24
    _ -> 8'case {3'$2
      , 64'$0
      , 64'$1
      , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
        {128'@, 128'@} -> Lt} of
      {3'@, 64'@, 64'@, 1'h0} -> $LL.Main.compute28

$LL.Main.compute30 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute30 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute29} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'h00000000000000000000000000000003
                            , 128'case 3'$2 of
                              {3'@} -> Resize} of
                            {128'@, 128'@} -> Add
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Div
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute34 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute34 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute2} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000002} of
                            {128'@, 128'@} -> Mul
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000001} of
                    {128'@, 128'@} -> Add
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute38 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute38 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute16} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                                      {3'@} -> Resize
                                    , 128'h00000000000000000000000000000003} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h00000000000000000000000000000008} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize
                            , 128'h00000000000000000000000000000002} of
                            {128'@, 128'@} -> Mul
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000001} of
                    {128'@, 128'@} -> Add
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute39 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute39 $0 $1 $2 = 8'case {3'$2
    , 64'$0
    , 64'$1
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
      {128'@, 128'@} -> Lt} of
    {3'@, 64'@, 64'@, 1'h1} -> $LL.Main.compute34
    _ -> 8'case {3'$2
      , 64'$0
      , 64'$1
      , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h00000000000000000000000000000003} of
        {128'@, 128'@} -> Lt} of
      {3'@, 64'@, 64'@, 1'h0} -> $LL.Main.compute38

$LL.Main.compute40 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute40 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute39} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h00000000000000000000000000000008
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'h00000000000000000000000000000003
                            , 128'case 3'case 128'case {128'case {128'case 3'$2 of
                                      {3'@} -> Resize
                                    , 128'h00000000000000000000000000000001} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h00000000000000000000000000000008} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize} of
                            {128'@, 128'@} -> Add
                          , 128'h00000000000000000000000000000008} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h00000000000000000000000000000002} of
                    {128'@, 128'@} -> Div
                  , 128'h00000000000000000000000000000008} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h00000000000000000000000000000001} of
          {128'@, 128'@} -> Sub
        , 128'h00000000000000000000000000000008} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute41 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute41 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case 1'case 1'case 128'case 3'$2 of
            {3'@} -> Resize of
          {128'@} -> Resize of
        {1'@} -> MSBit of
      {1'@} -> ReWire.Prelude.not} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute30
    _ -> 8'case {64'$0
      , 64'$1
      , 3'$2
      , 1'case 1'case 1'case 128'case 3'$2 of
              {3'@} -> Resize of
            {128'@} -> Resize of
          {1'@} -> MSBit of
        {1'@} -> ReWire.Prelude.not} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute40

$LL.Main.compute42 :: W64 -> W64 -> W128
$LL.Main.compute42 $0 $1 = {8'case {64'$0, 64'$1, 3'h0} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h1} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h2} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h3} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h4} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h5} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h6} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h7} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute20
  , 8'case {64'$0, 64'$1, 3'h0} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41
  , 8'case {64'$0, 64'$1, 3'h1} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41
  , 8'case {64'$0, 64'$1, 3'h2} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41
  , 8'case {64'$0, 64'$1, 3'h3} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41
  , 8'case {64'$0, 64'$1, 3'h4} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41
  , 8'case {64'$0, 64'$1, 3'h5} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41
  , 8'case {64'$0, 64'$1, 3'h6} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41
  , 8'case {64'$0, 64'$1, 3'h7} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute41}

$LL.Main.loop :: W128 -> W129
$LL.Main.loop $0 = {1'h1, 128'$0}

$LL.Main.loop2 :: W129 -> W129
$LL.Main.loop2 $0 = 129'case 129'$0 of
    {1'h0, 128'@} -> $LL.Main.loop

Main.compute :: W128 -> W128
Main.compute $0 = 128'case 128'$0 of
    {64'@, 64'@} -> $LL.Main.compute42

Main.loop :: W128 -> W129
Main.loop $0 = 129'case {1'h0, 128'case 128'$0 of {128'@} -> Main.compute} of
    {129'@} -> $LL.Main.loop2

ReWire.Prelude.not :: W1 -> W1
ReWire.Prelude.not $0 = 1'case 1'$0 of
    {1'h1} -> 1'h0
    _ -> 1'h1