device top_level:

inputs [("__in0",64),("__in1",64)]
outputs [("__out0",64),("__out1",64)]
states []

$Pure.dispatch :: W128 -> W129
$Pure.dispatch $0 = 129'case 128'$0 of
    {128'@} -> Main.loop1

$Pure.start :: W129
$Pure.start  = 129'h100000000000000000000000000000000

$LL.Main.compute85 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute85 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                                      {3'@} -> Resize
                                    , 128'h3} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h8} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize
                            , 128'h2} of
                            {128'@, 128'@} -> Mul
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h1} of
                    {128'@, 128'@} -> Add
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

Main.compute1 :: W128 -> W128
Main.compute1 $0 = 128'case 128'$0 of
    {64'@, 64'@} -> $LL.Main.compute

$LL.Main.compute79 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute79 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                              {3'@} -> Resize
                            , 128'h2} of
                            {128'@, 128'@} -> Mul
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h1} of
                    {128'@, 128'@} -> Add
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute78 :: W3 -> W64 -> W8
$LL.Main.compute78 $0 $1 = 8'case 128'case {128'case 64'$1 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                              {3'@} -> Resize
                            , 128'h3} of
                            {128'@, 128'@} -> Sub
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute75 :: W64 -> W3 -> W8
$LL.Main.compute75 $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'$1 of {3'@} -> Resize, 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute72 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute72 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of
      {128'@, 128'@} -> Lt} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute69
    _ -> 8'case {64'$0, 64'$1, 3'$2, 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of {128'@, 128'@} -> Lt} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute66

$LL.Main.compute71 :: W64 -> W3 -> W8
$LL.Main.compute71 $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$1 of
                              {3'@} -> Resize
                            , 128'h2} of
                            {128'@, 128'@} -> Mul
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h1} of
                    {128'@, 128'@} -> Add
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute69 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute69 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                              {3'@} -> Resize
                            , 128'h2} of
                            {128'@, 128'@} -> Mul
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h1} of
                    {128'@, 128'@} -> Add
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute66 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute66 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                                      {3'@} -> Resize
                                    , 128'h3} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h8} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize
                            , 128'h2} of
                            {128'@, 128'@} -> Mul
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h1} of
                    {128'@, 128'@} -> Add
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute65 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute65 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of
      {128'@, 128'@} -> Lt} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute42
    _ -> 8'case {64'$0, 64'$1, 3'$2, 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of {128'@, 128'@} -> Lt} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute41

$LL.Main.loop3 :: W129 -> W129
$LL.Main.loop3 $0 = 129'case 129'$0 of
    {1'h0, 128'@} -> $LL.Main.loop2

ReWire.Prelude.not :: W1 -> W1
ReWire.Prelude.not $0 = 1'case 1'$0 of
    {1'h1} -> 1'h0
    _ -> 1'h1

$LL.Main.compute60 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute60 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case 1'case 1'case 128'case 3'$2 of
            {3'@} -> Resize of
          {128'@} -> Resize of
        {1'@} -> MSBit of
      {1'@} -> ReWire.Prelude.not} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute15
    _ -> 8'case {64'$0
      , 64'$1
      , 3'$2
      , 1'case 1'case 1'case 128'case 3'$2 of
              {3'@} -> Resize of
            {128'@} -> Resize of
          {1'@} -> MSBit of
        {1'@} -> ReWire.Prelude.not} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute26

$LL.Main.compute59 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute59 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute43} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$0 of
                              {3'@} -> Resize
                            , 128'h3} of
                            {128'@, 128'@} -> Sub
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute58 :: W3 -> W64 -> W8
$LL.Main.compute58 $0 $1 = 8'case 128'case {128'case 64'$1 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'$0 of {3'@} -> Resize, 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.loop2 :: W128 -> W129
$LL.Main.loop2 $0 = {1'h1, 128'$0}

$LL.Main.compute53 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute53 $0 $1 $2 = 8'case {64'$0
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of
      {128'@, 128'@} -> Lt} of
    {64'@, 3'@, 1'h1} -> $LL.Main.compute71
    _ -> 8'case {64'$1, 3'$2, 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of {128'@, 128'@} -> Lt} of
      {64'@, 3'@, 1'h0} -> $LL.Main.compute51

$LL.Main.compute51 :: W64 -> W3 -> W8
$LL.Main.compute51 $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$1 of
                                      {3'@} -> Resize
                                    , 128'h3} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h8} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize
                            , 128'h2} of
                            {128'@, 128'@} -> Mul
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h1} of
                    {128'@, 128'@} -> Add
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

Main.loop1 :: W128 -> W129
Main.loop1 $0 = 129'case {1'h0, 128'case 128'$0 of {128'@} -> Main.compute1} of
    {129'@} -> $LL.Main.loop3

$LL.Main.compute48 :: W64 -> W3 -> W8
$LL.Main.compute48 $0 $1 = 8'case 128'case {128'case 64'$0 of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$1 of
                              {3'@} -> Resize
                            , 128'h3} of
                            {128'@, 128'@} -> Sub
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute43 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute43 $0 $1 $2 = 8'case {64'$0
    , 3'$2
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of
      {128'@, 128'@} -> Lt} of
    {64'@, 3'@, 1'h1} -> $LL.Main.compute75
    _ -> 8'case {64'$1, 3'$2, 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of {128'@, 128'@} -> Lt} of
      {64'@, 3'@, 1'h0} -> $LL.Main.compute48

$LL.Main.compute42 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute42 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'$2 of {3'@} -> Resize, 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute41 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute41 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute37} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                              {3'@} -> Resize
                            , 128'h3} of
                            {128'@, 128'@} -> Sub
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute37 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute37 $0 $1 $2 = 8'case {3'$2
    , 64'$0
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of
      {128'@, 128'@} -> Lt} of
    {3'@, 64'@, 1'h1} -> $LL.Main.compute58
    _ -> 8'case {3'$2, 64'$1, 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of {128'@, 128'@} -> Lt} of
      {3'@, 64'@, 1'h0} -> $LL.Main.compute78

$LL.Main.compute36 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute36 $0 $1 $2 = 8'case {3'$2
    , 64'$0
    , 64'$1
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of
      {128'@, 128'@} -> Lt} of
    {3'@, 64'@, 64'@, 1'h1} -> $LL.Main.compute23
    _ -> 8'case {3'$2, 64'$0, 64'$1, 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of {128'@, 128'@} -> Lt} of
      {3'@, 64'@, 64'@, 1'h0} -> $LL.Main.compute59

$LL.Main.compute34 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute34 $0 $1 $2 = 8'case {64'$0
    , 64'$1
    , 3'$2
    , 1'case 1'case 1'case 128'case 3'$2 of
            {3'@} -> Resize of
          {128'@} -> Resize of
        {1'@} -> MSBit of
      {1'@} -> ReWire.Prelude.not} of
    {64'@, 64'@, 3'@, 1'h1} -> $LL.Main.compute20
    _ -> 8'case {64'$0
      , 64'$1
      , 3'$2
      , 1'case 1'case 1'case 128'case 3'$2 of
              {3'@} -> Resize of
            {128'@} -> Resize of
          {1'@} -> MSBit of
        {1'@} -> ReWire.Prelude.not} of
      {64'@, 64'@, 3'@, 1'h0} -> $LL.Main.compute10

$LL.Main.compute32 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute32 $0 $1 $2 = 8'case {3'$2
    , 64'$0
    , 64'$1
    , 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of
      {128'@, 128'@} -> Lt} of
    {3'@, 64'@, 64'@, 1'h1} -> $LL.Main.compute79
    _ -> 8'case {3'$2, 64'$0, 64'$1, 1'case {128'case 3'$2 of {3'@} -> Resize, 128'h3} of {128'@, 128'@} -> Lt} of
      {3'@, 64'@, 64'@, 1'h0} -> $LL.Main.compute85

$LL.Main.compute26 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute26 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute72} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'case 3'$2 of
                              {3'@} -> Resize
                            , 128'h1} of
                            {128'@, 128'@} -> Sub
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h2} of
                    {128'@, 128'@} -> Div
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute23 :: W3 -> W64 -> W64 -> W8
$LL.Main.compute23 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$1, 64'$2, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53
        , 8'case {64'$1, 64'$2, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute53} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'$0 of {3'@} -> Resize, 128'h2} of
                    {128'@, 128'@} -> Mul
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute20 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute20 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute36} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'h3
                            , 128'case 3'$2 of
                              {3'@} -> Resize} of
                            {128'@, 128'@} -> Add
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h2} of
                    {128'@, 128'@} -> Div
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute15 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute15 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute65} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'$2 of {3'@} -> Resize, 128'h2} of
                    {128'@, 128'@} -> Div
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute10 :: W64 -> W64 -> W3 -> W8
$LL.Main.compute10 $0 $1 $2 = 8'case 128'case {128'case {8'case {64'$0, 64'$1, 3'h0} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32
        , 8'case {64'$0, 64'$1, 3'h1} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32
        , 8'case {64'$0, 64'$1, 3'h2} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32
        , 8'case {64'$0, 64'$1, 3'h3} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32
        , 8'case {64'$0, 64'$1, 3'h4} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32
        , 8'case {64'$0, 64'$1, 3'h5} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32
        , 8'case {64'$0, 64'$1, 3'h6} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32
        , 8'case {64'$0, 64'$1, 3'h7} of
          {64'@, 64'@, 3'@} -> $LL.Main.compute32} of
        {64'@} -> Resize
      , 128'case {128'case {128'case {128'h8
            , 128'case 3'case 128'case {128'case {128'case 3'case 128'case {128'case {128'h3
                            , 128'case 3'case 128'case {128'case {128'case 3'$2 of {3'@} -> Resize, 128'h1} of
                                    {128'@, 128'@} -> Sub
                                  , 128'h8} of
                                  {128'@, 128'@} -> Mod of
                                {128'@} -> Resize of
                              {3'@} -> Resize} of
                            {128'@, 128'@} -> Add
                          , 128'h8} of
                          {128'@, 128'@} -> Mod of
                        {128'@} -> Resize of
                      {3'@} -> Resize
                    , 128'h2} of
                    {128'@, 128'@} -> Div
                  , 128'h8} of
                  {128'@, 128'@} -> Mod of
                {128'@} -> Resize of
              {3'@} -> Resize} of
            {128'@, 128'@} -> Sub
          , 128'h1} of
          {128'@, 128'@} -> Sub
        , 128'h8} of
        {128'@, 128'@} -> Mul} of
      {128'@, 128'@} -> RShift of
    {128'@} -> Resize

$LL.Main.compute :: W64 -> W64 -> W128
$LL.Main.compute $0 $1 = {8'case {64'$0, 64'$1, 3'h0} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h1} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h2} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h3} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h4} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h5} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h6} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h7} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute60
  , 8'case {64'$0, 64'$1, 3'h0} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34
  , 8'case {64'$0, 64'$1, 3'h1} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34
  , 8'case {64'$0, 64'$1, 3'h2} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34
  , 8'case {64'$0, 64'$1, 3'h3} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34
  , 8'case {64'$0, 64'$1, 3'h4} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34
  , 8'case {64'$0, 64'$1, 3'h5} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34
  , 8'case {64'$0, 64'$1, 3'h6} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34
  , 8'case {64'$0, 64'$1, 3'h7} of
    {64'@, 64'@, 3'@} -> $LL.Main.compute34}